#!/usr/bin/env php
<?php
require __DIR__.'/vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Helper\QuestionHelper;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\Finder\Finder;

(new Application('rename', '1.0.0'))
    ->register('rename')
    ->addArgument('foo', InputArgument::OPTIONAL, 'The directory')
    ->addOption('bar', null, InputOption::VALUE_REQUIRED)
    ->setCode(function(InputInterface $input, OutputInterface $output) {
        $questionHelper = new QuestionHelper();
        $finder = new Finder();

        $vendor = $questionHelper->ask($input, $output, new Question('What is your plugin namespace (usually this is your organization name)? '));

        $q = new Question('What is your plugin name ("Plugin" will be appended to the plugin name)? ');
        $q->setValidator(static function ($answer) {
            if (!is_string($answer) || 'Plugin' === substr($answer, -6)) {
                throw new \RuntimeException(
                    'The name of the plugin should not include "Plugin". That will be appended automatically'
                );
            }

            return $answer;
        });
        $pluginName = $questionHelper->ask($input, $output, $q);
        $pluginNameWithSuffix = $pluginName . 'Plugin';

        $symfonyPath = '@' . $vendor . $pluginName;

        $yamlNamespace = Container::underscore($vendor) . '_' . Container::underscore($pluginName);
        if(substr($yamlNamespace, -7) === '_plugin') {
            $yamlNamespace = substr($yamlNamespace, 0, -7);
        }

        $finder->in(['src', 'tests'])->name('*.yaml')->contains(['acme_sylius_example', '@AcmeSyliusExamplePlugin']);
        foreach ($finder as $file) {
            replaceInFile($file->getPathname(), [
                'acme_sylius_example' => $yamlNamespace,
                '@AcmeSyliusExamplePlugin' => $symfonyPath,
            ]);
        }

        replaceInFile('composer.json', [
            'setono/sylius-plugin-skeleton' => str_replace('_', '-', Container::underscore($vendor)) . '/' . str_replace('_', '-', Container::underscore($pluginNameWithSuffix)),
            'Acme\\\\SyliusExamplePlugin' => $vendor . '\\\\' . $pluginName,
        ]);
    })
    ->getApplication()
    ->setDefaultCommand('rename', true) // Single command application
    ->run()
;

function replaceInFile(string $file, array $replacements): void
{
    $search = array_keys($replacements);
    $replace = array_values($replacements);

    $data = file_get_contents($file);
    file_put_contents($file, str_replace($search, $replace, $data));
}
