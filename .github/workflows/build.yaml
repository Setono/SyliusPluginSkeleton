name: "build"
on:
    push:
        branches:
            - "master"
    pull_request: ~
    schedule:
        - cron: "5 8 * * 1"

env:
    APP_ENV: "test"
    DATABASE_URL: "mysql://root:root@127.0.0.1/sylius?serverVersion=5.7"
    PHP_EXTENSIONS: "intl, mbstring"

jobs:
    coding-standards:
        name: "Coding Standards"

        runs-on: "ubuntu-latest"

        strategy:
            matrix:
                php-version:
                    - "7.3"
                    - "7.4"

                dependencies:
                    - "highest"

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP, with composer and extensions"
                uses: "shivammathur/setup-php@v2"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.PHP_EXTENSIONS }}"
                    coverage: "none"

            -   name: "Determine composer cache directory"
                uses: "./.github/actions/composer/composer/determine-cache-directory"

            -   name: "Cache composer dependencies"
                uses: "actions/cache@v2"
                with:
                    path: "${{ env.COMPOSER_CACHE_DIR }}"
                    key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                    restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            -   name: "Validate composer"
                run: "composer validate --strict"

            -   name: "Install ${{ matrix.dependencies }} dependencies with composer"
                uses: "./.github/actions/composer/composer/install"
                with:
                    dependencies: "${{ matrix.dependencies }}"

            -   name: "Check composer normalized"
                run: "composer normalize --dry-run"

            -   name: "Check style"
                run: "composer check-style"

            -   name: "Lint yaml files"
                run: "(cd tests/Application && bin/console lint:yaml ../../src/Resources)"

            -   name: "Lint twig files"
                run: "(cd tests/Application && bin/console lint:twig ../../src/Resources)"

    static-code-analysis:
        name: "Static Code Analysis"

        runs-on: "ubuntu-latest"

        strategy:
            matrix:
                php-version:
                    - "7.3"
                    - "7.4"

                dependencies:
                    - "highest"

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP, with composer and extensions"
                uses: "shivammathur/setup-php@v2"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.PHP_EXTENSIONS }}"
                    coverage: "none"

            -   name: "Determine composer cache directory"
                uses: "./.github/actions/composer/composer/determine-cache-directory"

            -   name: "Cache composer dependencies"
                uses: "actions/cache@v2"
                with:
                    path: "${{ env.COMPOSER_CACHE_DIR }}"
                    key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                    restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            -   name: "Install ${{ matrix.dependencies }} dependencies with composer"
                uses: "./.github/actions/composer/composer/install"
                with:
                    dependencies: "${{ matrix.dependencies }}"

            -   name: "Static analysis"
                run: "composer analyse"

    unit-tests:
        name: "Unit tests"

        runs-on: "ubuntu-latest"

        strategy:
            matrix:
                php-version:
                    - "7.3"
                    - "7.4"
                        
                dependencies:
                    - "lowest"
                    - "highest"

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP, with composer and extensions"
                uses: "shivammathur/setup-php@v2"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.PHP_EXTENSIONS }}"
                    coverage: "none"

            -   name: "Determine composer cache directory"
                uses: "./.github/actions/composer/composer/determine-cache-directory"

            -   name: "Cache composer dependencies"
                uses: "actions/cache@v2"
                with:
                    path: "${{ env.COMPOSER_CACHE_DIR }}"
                    key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                    restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            -   name: "Install ${{ matrix.dependencies }} dependencies with composer"
                uses: "./.github/actions/composer/composer/install"
                with:
                    dependencies: "${{ matrix.dependencies }}"

            -   name: "Run phpspec"
                run: "composer phpspec"

            -   name: "Run phpunit"
                run: "composer phpunit"

    integration-tests:
        name: "Integration tests"

        runs-on: "ubuntu-latest"

        strategy:
            matrix:
                php-version:
                    - "7.3"
                    - "7.4"

                dependencies:
                    - "lowest"
                    - "highest"

        steps:
            -   name: "Start MySQL"
                run: "sudo /etc/init.d/mysql start"

            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP, with composer and extensions"
                uses: "shivammathur/setup-php@v2"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.PHP_EXTENSIONS }}"
                    coverage: "none"

            -   name: "Determine composer cache directory"
                uses: "./.github/actions/composer/composer/determine-cache-directory"

            -   name: "Cache composer dependencies"
                uses: "actions/cache@v2"
                with:
                    path: "${{ env.COMPOSER_CACHE_DIR }}"
                    key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                    restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            -   name: "Install ${{ matrix.dependencies }} dependencies with composer"
                uses: "./.github/actions/composer/composer/install"
                with:
                    dependencies: "${{ matrix.dependencies }}"
                
            -   name: "Lint container"
                run: "(cd tests/Application && bin/console lint:container)"

            -   name: "Create database"
                run: "(cd tests/Application && bin/console doctrine:database:create -vvv)"

            -   name: "Create database schema"
                run: "(cd tests/Application && bin/console doctrine:schema:create -vvv)"
                
            -   name: "Validate Doctrine mapping"
                run: "(cd tests/Application && bin/console doctrine:schema:validate -vvv)"
